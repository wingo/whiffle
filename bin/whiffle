#!/bin/sh
# -*- scheme -*-
exec "${GUILE:-guile}" "$0" "$@"
!#
;;; Lightweight Scheme compiler directly to C. -*- scheme -*-
;;; Copyright (C) 2023 Andy Wingo.

;;; This library is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as
;;; published by the Free Software Foundation; either version 3 of the
;;; License, or (at your option) any later version.
;;;
;;; This library is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(use-modules (ice-9 format)
             (ice-9 getopt-long)
             (ice-9 match)
             (ice-9 textual-ports)
             (whiffle compile)
             (whiffle input))

(define (main args)
  (define (usage port)
    (format port "usage: ~a [OPTION...] [INPUT-FILE]\n" (car args))
    (format port "  available options:\n")
    (format port "    --expr/-e EXPR       compile EXPR instead of a file\n")
    (format port "    --help/-h            print this help message\n")
    (format port "    --compile-only/-c    only produce C file; don't make an executable\n")
    (format port "    --optimize/-O LEVEL  optimize at level LEVEL; default is 2\n")
    (format port "    --warn/-WLEVEL       warn at level LEVEL; default is 2\n")
    (format port "    --output/-o FILE     write result to FILE\n"))

  (define options
    (getopt-long args
                 '((expr (single-char #\e) (value #t))
                   (help (single-char #\h) (value #f))
                   (compile-only (single-char #\c) (value #f))
                   (optimize (single-char #\O) (value #t))
                   (warn (single-char #\W) (value #t))
                   (output (single-char #\o) (value #t)))))
  (when (option-ref options 'help #f)
    (usage (current-output-port))
    (exit 0))
  (define in-expr
    (and=> (option-ref options 'expr #f)
           open-input-string))
  (define in
    (match (option-ref options '() #f)
      ((in)
       (if in-expr
           (error "whiffle: can't compile file and expr at same time")
           (open-input-file in)))
      (() (or in-expr
              (begin
                (usage whiffle (current-error-port))
                (exit 1))))
      (_ (error "whiffle: too many input files\n"))))
  (define out
    (option-ref options 'output #f))
  (define optimization-level
    (or (and=> (option-ref options 'optimize "2")
               string->number)
        (error "unexpected optimization level")))
  (define warning-level
    (or (and=> (option-ref options 'warn "2")
               string->number)
        (error "unexpected warning level")))
  (define c-code
    (compile-to-c (read-and-expand in)
                  #:optimization-level optimization-level
                  #:warning-level warning-level))

  (cond
   ((option-ref options 'compile-only #f)
    (let ((port (if out (open-output-file out) (current-output-port))))
      (put-string port c-code)
      (force-output port)))
   (else
    ;; make temp dir; go there; write to .c file there
    ;; make -f build.mk
    ;; move output binary into place
    (error "unimplemented")))
  (exit 0))

(when (batch-mode?)
  (main (program-arguments)))
