#!/bin/sh
# -*- scheme -*-
exec "${GUILE:-guile}" "$0" "$@"
!#
;;; Lightweight Scheme compiler directly to C. -*- scheme -*-
;;; Copyright (C) 2023 Andy Wingo.

;;; This library is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as
;;; published by the Free Software Foundation; either version 3 of the
;;; License, or (at your option) any later version.
;;;
;;; This library is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(use-modules (ice-9 format)
             (ice-9 getopt-long)
             (ice-9 match)
             (ice-9 textual-ports)
             (whiffle compile)
             (whiffle input))

(define whiffle
  (dirname (dirname (canonicalize-path (current-filename)))))

(define (main args)
  (define (usage port)
    (format port "usage: ~a [OPTION...] [INPUT-FILE]\n" (car args))
    (format port "  available options:\n")
    (format port "    --expr/-e EXPR       compile EXPR instead of a file\n")
    (format port "    --help/-h            print this help message\n")
    (format port "    --compile-only/-c    only produce C file; don't make an executable\n")
    (format port "    --optimize/-O LEVEL  optimize at level LEVEL; default is 2\n")
    (format port "    --warn/-WLEVEL       warn at level LEVEL; default is 2\n")
    (format port "    --output/-o FILE     write result to FILE\n"))

  (define options
    (getopt-long args
                 '((expr (single-char #\e) (value #t))
                   (help (single-char #\h) (value #f))
                   (compile-only (single-char #\c) (value #f))
                   (optimize (single-char #\O) (value #t))
                   (warn (single-char #\W) (value #t))
                   (output (single-char #\o) (value #t)))))
  (when (option-ref options 'help #f)
    (usage (current-output-port))
    (exit 0))
  (define in-expr
    (option-ref options 'expr #f))
  (define in-file
    (match (option-ref options '() #f)
      ((in)
       (when in-expr
         (error "whiffle: can't compile file and expr at same time"))
       in)
      (()
       (unless in-expr
         (usage (current-error-port))
         (exit 1))
       #f)
      (_
       (error "whiffle: too many input files\n"))))
  (define in-port
    (if in-expr
        (open-input-string in-expr)
        (open-input-file in-file)))
  (define (strip-suffix str suffixes)
    (match suffixes
      (() #f)
      ((suffix . suffixes)
       (if (string-suffix? suffix str)
           (substring str 0 (- (string-length str) (string-length suffix)))
           (strip-suffix str suffixes)))))
  (define compile-only?
    (option-ref options 'compile-only #f))
  (define out-file
    (cond
     ((option-ref options 'output #f))
     ((not in-file)
      (cond
       (compile-only? #f)
       (else
        (format (current-error-port)
                "warning: no output file name specified; defaulting to `out'\n")
        "out")))
     ((strip-suffix (basename in-file) '(".scm" ".ss")))
     (else (string-append (basename in-file) ".bin"))))
  (define optimization-level
    (or (and=> (option-ref options 'optimize "2")
               string->number)
        (error "unexpected optimization level")))
  (define warning-level
    (or (and=> (option-ref options 'warn "2")
               string->number)
        (error "unexpected warning level")))
  (define c-code
    (compile-to-c (read-and-expand in-port)
                  #:optimization-level optimization-level
                  #:warning-level warning-level))

  (cond
   (compile-only?
    (let ((port (if out-file
                    (open-output-file out-file)
                    (current-output-port))))
      (put-string port c-code)
      (force-output port)))
   (else
    (unless out-file
      (error "missing output file; pass --output / -o"))
    (let* ((dir (mkdtemp (in-vicinity (or (getenv "TMPDIR") "/tmp")
                                      "whiffle-XXXXXX"))))
      (call-with-output-file (in-vicinity dir "out.c")
        (lambda (port)
          (put-string port c-code)))
      (define status
        (system* "make" "-C" dir "-f" (in-vicinity whiffle "build.mk") "out"))
      (unless (zero? (status:exit-val status))
        (format (current-error-port)
                "error: failed to compile generated C; leaving temp dir ~a\n"
                dir)
        (format (current-error-port)
                "error: try again via `make -C ~a -f ~a out\n"
                dir (in-vicinity whiffle "build.mk"))
        (exit 1))
      (rename-file (in-vicinity dir "out") out-file)
      (system* "make" "-C" dir "-f" (in-vicinity whiffle "build.mk")
               "clean")
      (delete-file (in-vicinity dir "out.c"))
      (rmdir dir))))
  (exit 0))

(when (batch-mode?)
  (main (program-arguments)))
